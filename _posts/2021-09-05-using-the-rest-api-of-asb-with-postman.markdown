---
layout: post
title:  "Using the REST API of Azure Service Bus with Postman"
date:   2021-09-05
categories: jekyll update
---

## Background

[Azure Service Bus](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview) is a messaging solution. It can be connected to using an SDK or its HTTP REST API. When developing applications that communicate with ASB, you typically want to use an SDK. This provides superior performance and less room for implementation error. For testing purposes, however, it becomes tedious to write tests using the SDK in separate test-applications. Instead, we can write the tests in Postman and [run test scripts in Postman](https://learning.postman.com/docs/writing-scripts/test-scripts/).


In this post, I demonstrate how to use the REST API of Azure Service Bus in Postman. Specifically, I show how to use a [pre-request script functionality](https://learning.postman.com/docs/writing-scripts/pre-request-scripts/) in Postman to generate a valid SAS token using the HMACSHA256 hashing algorithm.

## Setup

This post assumes that you have 
- [An active Azure account](https://azure.microsoft.com/en-us/free/)
- [Installed the Azure CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli)

First we need to create a resource group, 
{% highlight bash %}
az group create --location westus --name rg-asb-test
{% endhighlight %}
a service bus namespace,
{% highlight bash %}
az servicebus namespace create --name sb-asb-test --resource-group rg-asb-test --location westus
{% endhighlight %}
a service bus queue,
{% highlight bash %}
az servicebus queue create --name first --namespace-name sb-asb-test --resource-group rg-asb-test
{% endhighlight %}
and an authorization rule for authorizing ourselves for acessing the queue.
{% highlight bash %}
az servicebus namespace authorization-rule create --resource-group rg-asb-test --namespace-name sb-asb-test  --name myauthorule --rights {Send,Listen}
{% endhighlight %}

Then we can list the keys and connections string of the authorization rule we just created.
{% highlight bash %}
az servicebus queue authorization-rule keys list --name myauthorule --namespace-name sb-asb-test  --resource-group rg-asb-test
{% endhighlight %}
This gives us something of the form
```
{
  "aliasPrimaryConnectionString": null,
  "aliasSecondaryConnectionString": null,
  "keyName": "myauthorule",
  "primaryConnectionString": "Endpoint=sb://sb-asb-test.servicebus.windows.net/;SharedAccessKeyName=myauthorule;SharedAccessKey=***",
  "primaryKey": "***",
  "secondaryConnectionString": "Endpoint=sb://sb-asb-test.servicebus.windows.net/;SharedAccessKeyName=myauthorule;SharedAccessKey=***",
  "secondaryKey": "***"
}
```
where `***` containts the credentials necessary to send or receive messages to the queue. Specifically, we will use the `primaryKey` and the `keyName`. Keep in mind that these credentials are sensitive and should not be shared or commited to SCM. 

## Using the REST API of Azure Service Bus

We open up Postman, write a POST request to
```
https://sb-asb-test.servicebus.windows.net/first/messages
```
and run it. Ooopsie! This yields
```
<Error>
    <Code>401</Code>
    <Detail>claim is empty or token is invalid. TrackingId:790437f5-1fef-4d3e-8de8-f61d0b44ad42_G1, SystemTracker:sb-asb-test.servicebus.windows.net:first, Timestamp:2021-09-04T20:59:50</Detail>
</Error>
```
explaining that our message was not created as ASB found no valid token. 

### Creating the SAS token using HMAC256
To authorize ourselves for sending a message to the queue, we need to send a [SAS token](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas) in the Authorization header of the request. The token is generated by signing the queue name, and an expiry time with the value of `primaryKey` using the HMAC256 algorithm.

Doing this in a pre-request script in Postman is not straightforward, so we'll hold your hand. Open up the pre-request script tab of the request, and paste in this snippet.
{% highlight javascript %}
// Fetch address we are targeting, including the queue name
var uri = pm.request.url.toString();
var encoded = encodeURIComponent(uri); 

// Specify a token time-to-live.
var ttl = Math.round((new Date()).getTime() / 1000) + 60*60*24*7;

var sr = encoded + '\n' + ttl; 
var srUTF8 = CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Utf8.parse(sr));

var saKey = pm.environment.get("primaryKey"); // <-- Must be set
var saName = "myauthorule";

var hash = CryptoJS.HmacSHA256(srUTF8, saKey);
var token = encodeURIComponent(hash.toString(CryptoJS.enc.Base64));
var sas = 'SharedAccessSignature sr=' + encoded + '&sig=' + token + '&se=' + ttl + '&skn=' + saName;
pm.environment.set('token', sas); 
{% endhighlight %}
This assumes that you have set the value `primaryKey` into your active Postman environment under the name `primaryKey`. [Read this](https://learning.postman.com/docs/sending-requests/variables/#understanding-variables) if you're unsure what that means.

### Sending a message

Back in the request, we specify the header

Authorization: \{\{ token \}\}

Postman then populates the header value with the token we generated in the pre-request script. To put some content into the message, we set the body of the request to this ASCII moose

```
      (_V__V_)
        (oo)  
 /-------\/   
"| _____||    
 ||     ||    
  ^^     ^^   
Female Moose  
```
and send  it. This time, we receive a 201 Created status code. Very happy.

#### Not working?

If you receive the error 
```
TypeError: Cannot read property 'sigBytes' of undefined
```
this means Postman did not find the environment variable `primaryKey`. Ensure that the correct Postman environment is active.


### Fetching a message

To fetch the message we just stored, we change the HTTP verb from POST to DELETE and change the address to 

`https://sb-asb-test.servicebus.windows.net/first/messages/head`

Running the request gives us our moose back.


## Cleaning up

To make sure we don't accrue any unnecessary costs in Azure, we delete the resource group 
{% highlight bash %}
az group delete --name rg-asb-test
{% endhighlight %}

If something in this guide didn't work, please [open an issue on my Github page](https://github.com/mikalst/mikalst.github.io/issues/new/choose).